{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}
[Global]
	Name = {{ $CurrentContainer.Hostname }}.{{ $CurrentContainer.Env.DOMAIN }}
	AdminInfo1 = This server is running the rwindegger/ngIRCd container.
	AdminInfo2 = This server is located somewhere for sure.
	AdminEMail = notspecified@{{ $CurrentContainer.Env.DOMAIN }}
	Info = This server is running the rwindegger/ngIRCd container.
	Network = {{ $CurrentContainer.Env.NETWORK }}
	MotdPhrase = "Welcome to a server running rwindegger/ngIRCd"
	Ports = 6667

[Limits]
	MaxConnectionsIP = 5

[Options]
	CloakHost = %x.{{ $CurrentContainer.Env.NETWORK }}
	CloakHostModeX = %x.user.{{ $CurrentContainer.Env.NETWORK }}
	CloakUserToNick = yes
	IncludeDir = /opt/ngircd/etc/conf.d
	OperCanUseMode = yes
	OperChanPAutoOp = yes
	OperServerMode = yes

;[SSL]
	# SSL-related configuration options. Please note that this section
	# is only available when ngIRCd is compiled with support for SSL!
	# So don't forget to remove the ";" above if this is the case ...

	# SSL Server Key Certificate
	;CertFile = /usr/local/etc/ssl/server-cert.pem

	# Select cipher suites allowed for SSL/TLS connections. This defaults
	# to HIGH:!aNULL:@STRENGTH (OpenSSL) or SECURE128 (GnuTLS).
	# See 'man 1ssl ciphers' (OpenSSL) or 'man 3 gnutls_priority_init'
	# (GnuTLS) for details.
	# For OpenSSL:
	;CipherList = HIGH:!aNULL:@STRENGTH:!SSLv3
	# For GnuTLS:
	;CipherList = SECURE128:-VERS-SSL3.0

	# Diffie-Hellman parameters
	;DHFile = /usr/local/etc/ssl/dhparams.pem

	# SSL Server Key
	;KeyFile = /usr/local/etc/ssl/server-key.pem

	# password to decrypt SSLKeyFile (OpenSSL only)
	;KeyFilePassword = secret

	# Additional Listen Ports that expect SSL/TLS encrypted connections
	;Ports = 6697, 9999

[Operator]
	# [Operator] sections are used to define IRC Operators. There may be
	# more than one [Operator] block, one for each local operator.

	# ID of the operator (may be different of the nickname)
	;Name = TheOper

	# Password of the IRC operator
	;Password = ThePwd

	# Optional Mask from which /OPER will be accepted
	;Mask = *!ident@somewhere.example.com

[Operator]
	# More [Operator] sections, if you like ...

[Server]
	# Other servers are configured in [Server] sections. If you
	# configure a port for the connection, then this ngircd tries to
	# connect to to the other server on the given port; if not it waits
	# for the other server to connect.
	# There may be more than one server block, one for each server.
	#
	# Server Groups:
	# The ngIRCd allows "server groups": You can assign an "ID" to every
	# server with which you want this ngIRCd to link. If a server of a
	# group won't answer, the ngIRCd tries to connect to the next server
	# in the given group. But the ngircd never tries to connect to two
	# servers with the same group ID.

	# IRC name of the remote server, must match the "Name" variable in
	# the [Global] section of the other server (when using ngIRCd).
	;Name = irc2.example.net

	# Internet host name or IP address of the peer (only required when
	# this server should establish the connection).
	;Host = connect-to-host.example.net

	# IP address to use as _source_ address for the connection. if
	# unspecified, ngircd will let the operating system pick an address.
	;Bind = 10.0.0.1

	# Port of the server to which the ngIRCd should connect. If you
	# assign no port the ngIRCd waits for incoming connections.
	;Port = 6667

	# Own password for the connection. This password has to be configured
	# as "PeerPassword" on the other server.
	;MyPassword = MySecret

	# Foreign password for this connection. This password has to be
	# configured as "MyPassword" on the other server.
	;PeerPassword = PeerSecret

	# Group of this server (optional)
	;Group = 123

	# Set the "Passive" option to "yes" if you don't want this ngIRCd to
	# connect to the configured peer (same as leaving the "Port" variable
	# empty). The advantage of this option is that you can actually
	# configure a port an use the IRC command CONNECT more easily to
	# manually connect this specific server later.
	;Passive = no

	# Connect to the remote server using TLS/SSL (Default: false)
	;SSLConnect = yes

	# Define a (case insensitive) list of masks matching nicknames that
	# should be treated as IRC services when introduced via this remote
	# server, separated by commas (",").
	# REGULAR SERVERS DON'T NEED this parameter, so leave it empty
	# (which is the default).
	# When you are connecting IRC services which mask as a IRC server
	# and which use "virtual users" to communicate with, for example
	# "NickServ" and "ChanServ", you should set this parameter to
	# something like "*Serv" or "NickServ,ChanServ,XyzServ".
	;ServiceMask = *Serv,Global

[Server]
	# More [Server] sections, if you like ...

# -eof-
